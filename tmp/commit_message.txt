fix: Ensure Ctrl+C during async operations returns to prompt

Refined KeyboardInterrupt (Ctrl+C) handling in `src/qx/main.py` to ensure that interrupting an asynchronous operation (e.g., while QX is "thinking") returns the user to the input prompt instead of exiting the application.

- Added an `except asyncio.CancelledError:` block to the main loop in `_async_main`. When a `KeyboardInterrupt` occurs during an `await` call, `asyncio.run()` cancels the main task, raising `asyncio.CancelledError`. This new handler catches the error, prints a message, optionally clears `current_message_history`, and then `continue`s the loop, effectively returning to the prompt.
- This prevents the `KeyboardInterrupt` from propagating up and causing the application to terminate.
- The existing `except KeyboardInterrupt:` in `_async_main` remains for synchronous interrupts.
- Updated `.Q/projectlog.md` to reflect this more robust handling.